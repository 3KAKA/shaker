heat_template_version: 2013-05-23

description: >
  HOT template to create a new neutron network plus a router to the public
  network, and for deploying servers into the new network.

parameters:
  image:
    type: string
    description: Name of image to use for servers
  flavor:
    type: string
    description: Flavor to use for servers
  external_net:
    type: string
    description: ID or name of public network for which floating IP addresses will be allocated
  server_endpoint:
    type: string
    description: Server endpoint address

resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: {{ unique }}_net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: 10.0.0.0/16
      dns_nameservers: [ 8.8.8.8, 8.8.4.4 ]

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

{% for group in groups %}

  {{ group.master.name }}:
    type: OS::Nova::Server
    properties:
      name: {{ group.master.name }}
      image: { get_param: image }
      flavor: { get_param: flavor }
      availability_zone: "nova:{{ group.master.node }}"
      networks:
        - port: { get_resource: {{ group.master.name }}_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/sh
            screen -dmS shaker-agent-screen shaker-agent --server-endpoint=$SERVER_ENDPOINT --agent-id=$AGENT_ID
          params:
            "$SERVER_ENDPOINT": { get_param: server_endpoint }
            "$AGENT_ID": {{ group.slave.name }}

  {{ group.master.name }}_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

{% endfor %}

outputs:
{% for group in groups %}
  {{ group.master.name }}_ip:
    value: { get_attr: [ {{ group.master.name }}, networks, { get_attr: [private_net, name] }, 0 ] }
  {{ group.master.name }}_instance_name:
    value: { get_attr: [ {{ group.master.name }}, instance_name ] }
{% endfor %}
